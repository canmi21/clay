name: Rust CI

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            toolchain: stable
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            toolchain: stable
          #- os: ubuntu-latest
          #  target: aarch64-unknown-linux-musl
          #  toolchain: stable
          - os: macos-latest
            target: x86_64-apple-darwin
            toolchain: stable
          - os: macos-latest
            target: aarch64-apple-darwin
            toolchain: stable

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies (Ubuntu only)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential pkg-config libssl-dev musl-tools \
            gcc-aarch64-linux-gnu curl zip

      - name: Install Rust and target
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}

      - name: Build binary
        env:
          OPENSSL_STATIC: "true"
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            export CFLAGS="-D_FORTIFY_SOURCE=0 -std=gnu11"
          fi
          if [[ "${{ matrix.target }}" == *"-musl" || "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cargo build --release --target=${{ matrix.target }} --no-default-features --features musl-vendored
          else
            cargo build --release --target=${{ matrix.target }}
          fi

      - name: Read crate metadata
        id: metadata
        run: |
          package_name=$(grep '^name =' Cargo.toml | head -n1 | sed 's/.*= "\(.*\)"/\1/')
          version=$(grep '^version =' Cargo.toml | head -n1 | sed 's/.*= "\(.*\)"/\1/')
          binary_name=$(grep -A1 '^\[\[bin\]\]' Cargo.toml | grep '^name =' | head -n1 | sed 's/.*= "\(.*\)"/\1/')
          if [ -z "$binary_name" ]; then
            binary_name="$package_name"
          fi
          echo "package_name=$package_name" >> "$GITHUB_OUTPUT"
          echo "binary_name=$binary_name" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "Package name: $package_name"
          echo "Binary name: $binary_name"
          echo "Version: $version"

      - name: List files for debugging
        run: |
          echo "Files in target/${{ matrix.target }}/release/:"
          ls -la target/${{ matrix.target }}/release/ || echo "Directory not found"

      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ ! -f "${{ steps.metadata.outputs.binary_name }}" ]; then
            echo "Error: Binary file '${{ steps.metadata.outputs.binary_name }}' not found!"
            echo "Available files:"
            ls -la
            exit 1
          fi
          tar czf "${{ steps.metadata.outputs.package_name }}-${{ matrix.target }}.tar.gz" "${{ steps.metadata.outputs.binary_name }}"
          zip "${{ steps.metadata.outputs.package_name }}-${{ matrix.target }}.zip" "${{ steps.metadata.outputs.binary_name }}"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.metadata.outputs.version }}
          name: v${{ steps.metadata.outputs.version }}
          files: |
            target/${{ matrix.target }}/release/${{ steps.metadata.outputs.package_name }}-${{ matrix.target }}.tar.gz
            target/${{ matrix.target }}/release/${{ steps.metadata.outputs.package_name }}-${{ matrix.target }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}